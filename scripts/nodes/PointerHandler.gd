extends Node2D
class_name PointerHandler

# ------------------------------------------------------------------------------
# Signals
# ------------------------------------------------------------------------------
signal object_selected(obj : Node2D)

# ------------------------------------------------------------------------------
# Constants and ENUMs
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Export Variables
# ------------------------------------------------------------------------------
@export_category("PointerHandler")
@export var object_group : StringName = &""
@export var shape : Shape2D = null

# ------------------------------------------------------------------------------
# Variables
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Onready Variables
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Setters / Getters
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Override Methods
# ------------------------------------------------------------------------------
func _unhandled_input(event: InputEvent) -> void:
	if event.is_action_pressed("action"):
		_FindObject()

# ------------------------------------------------------------------------------
# Private Methods
# ------------------------------------------------------------------------------
func _FindObject() -> void:
	if object_group.is_empty() or shape == null: return
	var params : PhysicsShapeQueryParameters2D = PhysicsShapeQueryParameters2D.new()
	params.shape = shape
	params.transform.origin = get_global_mouse_position()
	var res : Array[Dictionary] = get_world_2d().direct_space_state.intersect_shape(params)
	for info in res:
		if info.collider is LilBot:
			object_selected.emit(info.collider)
			return
	object_selected.emit(null)

# ------------------------------------------------------------------------------
# Public Methods
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
# Handler Methods
# ------------------------------------------------------------------------------



